#include <unistd.h>
#include <cstdlib>
#include <iostream>
#include <iomanip>


#include "../cpp/driver/wishbone_bus.h"
#include "../cpp/driver/fw_data.h"
#include "../cpp/driver/mcu_firmware.h"
#include "../cpp/driver/imu_data.h"
#include "../cpp/driver/imu_sensor.h"
#include "../cpp/driver/pressure_data.h"
#include "../cpp/driver/pressure_sensor.h"
#include "../cpp/driver/humidity_data.h"
#include "../cpp/driver/humidity_sensor.h"
#include "../cpp/driver/uv_sensor.h"
#include "../cpp/driver/uv_data.h"

#include "../cpp/driver/imu_sensor.h"
#include "../cpp/driver/creator_memory_map.h"


namespace hal = matrix_hal;

const uint16_t kMCUBaseAddress = 0x3800;
const uint16_t kMemoryOffsetSamCommunication=0x60;

struct TestData
{
	uint32_t period;
	uint32_t dutyCycle;
};

int main() 
{
	hal::WishboneBus bus;
	bus.SpiInit();
	
	TestData test;
	test.period=0xABCDEF01;
	test.dutyCycle=0x7A7A7A7A;
	
	
	uint32_t i;
	while(true)
	{
		for (i=0;i<16;i++)
		{
			std::cout << "Hello World, " << i<<"\n"<<std::endl;
			bus.SpiWrite(kMCUBaseAddress+kMemoryOffsetSamCommunication, &test,0);
			usleep(1000000);
		}
	}
}
